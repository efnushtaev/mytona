{"version":3,"sources":["config/constant.js","redux/reducers/auth-reducer.js","view/components/login-page/login-form.js","view/components/login-page/login-page.js","view/hoc/withAuthRedirection.js","view/components/main-page/main-page.js","data/api.js","redux/reducers/photos-reducer.js","view/utilities/paginator/paginator.js","view/utilities/preloader/preloader.js","view/components/photos-page/photos-list.js","view/components/photos-page/photos-page.js","redux/reducers/posts-reducer.js","view/components/posts-page/posts-table.js","view/components/posts-page/posts-page.js","view/components/navigation-bar/navigation-bar.js","App.js","serviceWorker.js","redux/store-redux.js","index.js"],"names":["LOGIN","PASSWORD","initialState","email","password","isAuthorized","isValid","updateAuthorization","payload","type","LoginForm","props","onUserEmailChange","onUserPasswordChange","onHandleSubmit","className","onSubmit","for","defaultValue","id","name","onChange","e","target","value","connect","state","auth","onUserDataCheck","dispatch","defaultAuthData","restProps","from","to","preventDefault","mapStateToPropsForRedirect","withAuthRedirection","Component","compose","instance","axios","baseURL","withCredentials","usersAPI","get","then","response","SET_PHOTOS","IS_FETCHING","photos","isFetching","pagesSize","pageCount","currentPage","updateFetchingStatus","setPagesCount","Paginator","onPageChanged","totalItemsCount","useState","portionNumber","setPortionNumber","pages","pagesCount","Math","ceil","length","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","useEffect","class","onClick","filter","p","map","Preloader","role","PhotosList","photosList","style","width","src","thumbnailUrl","loadingPhotos","a","status","data","console","error","onCurrentPageChanged","currentPhotos","slice","SET_POSTS","posts","PostsTable","postsList","scope","title","body","loadingPosts","currentPosts","activeClassName","path","render","exact","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gRAAe,GACbA,MAAO,WACPC,SAAU,YCIRC,EAAe,CACjBC,MAAO,GACPC,SAAU,GACVC,cAAc,EACdC,SAAS,GAgCEC,EAAsB,SAAAC,GAAO,MAAK,CAACC,KAtCpB,2BAsC+CD,YChB5DE,EAxBG,SAACC,GAAW,IAAD,EACyEA,EAA7FA,MAAOR,EADa,EACbA,MAAOC,EADM,EACNA,SAAUE,EADJ,EACIA,QAASM,EADb,EACaA,kBAAmBC,EADhC,EACgCA,qBAAuBC,EAAkBH,EAAlBG,eAElF,OAAO,yBAAKC,UAAW,iCACrB,yBAAKA,UAAW,uBACd,0BAAMA,UAAW,MAAOC,SAAUF,GAChC,yBAAKC,UAAW,cACZ,2BAAOA,UAAW,OAAQE,IAAI,SAA9B,kCAGA,2BAAOF,UAAW,gBAAkBT,EAAU,GAAK,eAAgBY,aAAcf,EAAOgB,GAAG,QAAQC,KAAK,QAAQX,KAAK,OAAOY,SAAU,SAAAC,GAAC,OAAIV,EAAkBU,EAAEC,OAAOC,UACtK,2BAAOT,UAAWT,EAAU,uBAAyB,oBAArD,mCAAgF,wCAChF,2BAAOS,UAAW,OAAQE,IAAI,YAA9B,wCAGA,2BAAOF,UAAW,gBAAkBT,EAAU,GAAK,eAAgBY,aAAcd,EAAUe,GAAG,WAAWC,KAAK,OAAOX,KAAK,OAAOY,SAAU,SAAAC,GAAC,OAAIT,EAAqBS,EAAEC,OAAOC,UAC9K,2BAAOT,UAAWT,EAAU,uBAAyB,oBAArD,yCAAiF,wCACjF,2BAAOS,UAAW,4CAA6CN,KAAK,SAASe,MAAM,iCAAQL,GAAG,gBCa3FM,eAXO,SAACC,GACrB,MACE,CACEvB,MAAOuB,EAAMC,KAAKxB,MAClBC,SAAUsB,EAAMC,KAAKvB,SACrBC,aAAcqB,EAAMC,KAAKtB,aACzBC,QAASoB,EAAMC,KAAKrB,WAKa,CACrCM,kBFO+B,SAAAJ,GAAO,MAAK,CAACC,KAtCvB,sBAsC6CD,YENlEK,qBFOkC,SAAAL,GAAO,MAAK,CAACC,KAtCvB,yBAsCgDD,YENxEoB,gBFS6B,SAACzB,EAAOC,GAAR,OAAqB,SAAAyB,GAClD,IAA+BC,KAOTA,GAND9B,QAAUG,GAAS2B,EAAgB7B,WAAaG,EACjEyB,EAAStB,GAAoB,IAE7BsB,EAAStB,GAAoB,OEjBpBkB,EA1BG,SAACd,GAAW,IACrBN,EAAgEM,EAAhEN,aAAcuB,EAAkDjB,EAAlDiB,gBAAiBzB,EAAiCQ,EAAjCR,MAAOC,EAA0BO,EAA1BP,SAAa2B,EAD/B,YAC4CpB,EAD5C,uDAM3B,OACEN,EACI,kBAAC,IAAD,CAAU2B,KAAK,SAASC,GAAG,MAC3B,yBAAKlB,UAAW,aACd,kBAAC,EAAD,CAAWD,eARE,SAACQ,GACpBA,EAAEY,iBACFN,EAAgBzB,EAAOC,IAMwBO,MAAOoB,QCZtDI,EAA6B,SAACT,GAAD,MAAY,CAC3CrB,aAAaqB,EAAMC,KAAKtB,eAGb+B,EAAsB,SAACC,GAOlC,OADqCZ,YAAQU,EAARV,EALP,SAACd,GAC3B,OAAQA,EAAMN,aAEV,kBAACgC,EAAc1B,GADf,kBAAC,IAAD,CAAUsB,GAAG,e,OCDRK,cAAQF,EAARE,EANE,WACf,OACE,wBAAIvB,UAAW,4CAAf,kB,yBCJEwB,E,MAAWC,OAAa,CAC1BC,QAAS,wCACTC,iBAAiB,IAGRC,EAAW,WAEhB,OAAOJ,EAASK,IAAI,SACfC,MAAK,SAAAC,GACF,OAAOA,MAJVH,EAAW,WAQhB,OAAOJ,EAASK,IAAI,UACfC,MAAK,SAAAC,GACF,OAAOA,MCfjBC,EAAa,wBACbC,EAAc,2BAIhB9C,EAAe,CACjB+C,OAAQ,GACRC,WAAY,GACZC,UAAW,IACXC,UAAW,GACXC,YAAa,GAkCFC,EAAuB,SAAA9C,GAAO,MAAK,CAACC,KAAMuC,EAAaxC,YAEvD+C,EAAgB,SAAA/C,GAAO,MAAK,CAACC,KA3ClB,yBA2CyCD,Y,QCTlDgD,EArCC,SAAC7C,GACkDA,EAA1D0C,YAMP,IAP0B,IACNI,EAA6C9C,EAA7C8C,cAAeN,EAA8BxC,EAA9BwC,UAAWO,EAAmB/C,EAAnB+C,gBADrB,EAEeC,mBAAS,GAFxB,mBAEpBC,EAFoB,KAELC,EAFK,KAKrBC,EAAQ,GACRC,EAAaC,KAAKC,KAAKP,EAAgBQ,OAASf,GAC3CgB,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BL,EAAMM,KAAKD,GAGf,IAAIE,EAAeL,KAAKC,KAAKF,EARX,GASdO,EATc,GASWV,EAAgB,GAAmB,EAC5DW,EAVc,EAUWX,EAM7B,OAJAY,qBAAU,cAEP,CAACd,IAEG,oCACL,wBAAIe,MAAM,cACPb,EAAgB,GACZ,wBAAI7C,UAAW,YAAa2D,QAAS,WAAOb,EAAiBD,EAAgB,KAAK,uBAAG7C,UAAW,aAAd,SAEtF+C,EACIa,QAAO,SAAAC,GAAC,OAAIA,GAAKN,GAAyBM,GAAKL,KAC/CM,KAAI,SAAAvD,GACD,OAAO,wBAAIP,UAAW,YAAa2D,QAAS,WAAOjB,EAAcnC,KAAK,uBAAGP,UAAW,aAAcO,OAEzG+C,EAAeT,GACV,wBAAI7C,UAAW,YAAa2D,QAAS,WAAOb,EAAiBD,EAAgB,KAAK,uBAAG7C,UAAW,aAAd,YCxB/E+D,EANG,WAChB,OAAO,yBAAKL,MAAM,iBAAiBM,KAAK,UACtC,0BAAMN,MAAM,WAAZ,gBCIWO,EANI,SAAC,GAClB,OADmC,EAAhBC,WACDJ,KAAI,SAAAvD,GACpB,OAAO,yBAAKP,UAAW,gBAAiBmE,MAAO,CAACC,MAAM,OAAQC,IAAK9D,EAAE+D,mBCiC1D/C,cAAQb,aAPD,SAAAC,GAAK,MAAK,CAC9BwB,WAAYxB,EAAMuB,OAAOC,WACzBD,OAAQvB,EAAMuB,OAAOA,OACrBE,UAAWzB,EAAMuB,OAAOE,UACxBE,YAAa3B,EAAMuB,OAAOI,eAIT,CACfiC,cJYyB,yDAAM,WAAOzD,GAAP,eAAA0D,EAAA,6DACjC1D,EAASyB,GAAqB,IADG,SAEZX,IAFY,OAE7BG,EAF6B,OAGjCjB,EAAS0B,GACc,MAApBT,EAAS0C,QACV3D,EAASyB,GAAqB,IAC9BzB,GAVqBrB,EAUFsC,EAAS2C,KAVK,CAAChF,KAAMsC,EAAYvC,cAYpDkF,QAAQC,MAAM,WAAa7C,EAAS0C,QARL,iCAJV,IAAAhF,IAIU,OAAN,uDIXzB8C,uBACAsC,qBJQgC,SAAApF,GAAO,MAAK,CAACC,KA7CjB,iCA6CgDD,cIP3E4B,EALUE,EA5BI,SAAC3B,GAAW,IACtBsC,EAAkCtC,EAAlCsC,OAAQI,EAA0B1C,EAA1B0C,YAAaF,EAAaxC,EAAbwC,UACtB0C,EAAgB5C,EAAO6C,OAAOzC,EAAY,GAAKF,GAAaE,EAAY,GAAKF,EAAaA,GAMhG,OAJAqB,qBAAU,WACR7D,EAAM2E,kBACL,IAEI,oCACL,sCACC3E,EAAMuC,YAAc,kBAAC,EAAD,MACrB,kBAAC,EAAD,CACEG,YAAa1C,EAAM0C,YACnBI,cAAe9C,EAAMiF,qBACrBzC,UAAWxC,EAAMwC,UACjBO,gBAAiB/C,EAAMsC,SAEzB,kBAAC,EAAD,CAAYgC,WAAYY,QCxBtBE,EAAY,uBAKd7F,EAAe,CACjB8F,MAAO,GACP9C,WAAY,GACZC,UAAW,GACXC,UAAW,GACXC,YAAa,GAkCFC,EAAuB,SAAA9C,GAAO,MAAK,CAACC,KA3C7B,0BA2CgDD,YAEvD+C,EAAgB,SAAA/C,GAAO,MAAK,CAACC,KA3ClB,wBA2CyCD,YCzBlDyF,EArBI,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACnB,OAAO,2BAAOzB,MAAM,SACpB,+BACE,4BACE,wBAAI0B,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,0DACA,wBAAIA,MAAM,OAAV,8BAGJ,+BACGD,EAAUrB,KAAI,SAAAvD,GACb,OAAO,4BACL,wBAAI6E,MAAM,OAAO7E,EAAEH,IACnB,4BAAKG,EAAE8E,OACP,4BAAK9E,EAAE+E,aCuBb/D,cAAQb,aATY,SAAAC,GAAK,MAAK,CAC9BwB,WAAYxB,EAAMsE,MAAM9C,WACxB8C,MAAOtE,EAAMsE,MAAMA,MACnB7C,UAAWzB,EAAMsE,MAAM7C,UACvBE,YAAa3B,EAAMsE,MAAM3C,eAMN,CACfiD,aFUsB,yDAAM,WAAOzE,GAAP,eAAA0D,EAAA,6DAChC1D,EAASyB,GAAqB,IADE,SAEXX,IAFW,OAE5BG,EAF4B,OAIhCjB,EAAS0B,GACc,MAApBT,EAAS0C,QACV3D,EAASyB,GAAqB,IAC9BzB,GAXoBrB,EAWFsC,EAAS2C,KAXK,CAAChF,KAAMsF,EAAWvF,cAalDkF,QAAQC,MAAM,WAAa7C,EAAS0C,QATN,iCAJV,IAAAhF,IAIU,OAAN,uDETtB8C,uBACAsC,qBFM8B,SAAApF,GAAO,MAAK,CAACC,KA7CjB,gCA6CgDD,cELxE4B,EALNE,EA9BgB,SAAC3B,GAAW,IACrBqF,EAAiCrF,EAAjCqF,MAAO3C,EAA0B1C,EAA1B0C,YAAaF,EAAaxC,EAAbwC,UACrBoD,EAAeP,EAAMF,OAAOzC,EAAY,GAAKF,GAAaE,EAAY,GAAKF,EAAaA,GAM9F,OAJAqB,qBAAU,WACR7D,EAAM2F,iBACL,IAEI,oCACL,qCACC3F,EAAMuC,YAAc,kBAAC,EAAD,MACrB,kBAAC,EAAD,CACEG,YAAa1C,EAAM0C,YACnBI,cAAe9C,EAAMiF,qBACrBzC,UAAWxC,EAAMwC,UACjBO,gBAAiB/C,EAAMqF,QAEzB,kBAAC,EAAD,CAAYE,UAAWK,Q,QCQZ9E,eAJO,SAACC,GAAD,MAAY,CAChCrB,aAAcqB,EAAMC,KAAKtB,gBAGa,CAACE,uBAA1BkB,EA7BO,SAAC,GAAyC,IAAxCpB,EAAuC,EAAvCA,aAAcE,EAAyB,EAAzBA,oBACpC,OACE,6BACE,wBAAIQ,UAAW,aAAf,iBACA,wBAAIA,UAAW,2BACb,wBAAIA,UAAW,YACb,kBAAC,IAAD,CAASyF,gBAAiB,SAAUzF,UAAW,WAAYkB,GAAG,KAA9D,SAEF,wBAAIlB,UAAW,YACb,kBAAC,IAAD,CAASyF,gBAAiB,SAAUzF,UAAW,WAAYkB,GAAG,UAA9D,UAEF,4BACE,kBAAC,IAAD,CAASuE,gBAAiB,SAAUzF,UAAW,WAAYkB,GAAG,WAA9D,WAEF,4BACG5B,EACG,4BAAQU,UAAW,8CAA+C2D,QAAS,kBAAMnE,GAAoB,KAArG,UACA,kBAAC,IAAD,CAASiG,gBAAiB,SAAUzF,UAAW,uBAAwBkB,GAAG,UAA1E,eCYCR,eAHO,SAACC,GAAD,MAAY,CAChCrB,aAAcqB,EAAMC,KAAKtB,gBAEa,GAAzBoB,EAxBH,WAEV,OACE,yBAAKV,UAAU,wBACb,6BACE,kBAAC,EAAD,OAEF,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0F,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOD,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,4CCVlBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTFC,EAAWC,YAAgB,CAC7BvF,KjBEyB,WAAmC,IAAlCD,EAAiC,uDAAzBxB,EAAciH,EAAW,uCAC3D,OAAOA,EAAO1G,MACZ,IAbmB,sBAcjB,OAAO,eACFiB,EADL,CAEEvB,MAAOgH,EAAO3G,UAGlB,IAlBsB,yBAmBpB,OAAO,eACFkB,EADL,CAEEtB,SAAU+G,EAAO3G,UAGrB,IAvBwB,2BAyBtB,OAAO,eACFkB,EADL,CAEErB,aAAc8G,EAAO3G,QACrBF,QAAS6G,EAAO3G,UAGpB,QACE,OAAOkB,IiBxBXuB,OXG2B,WAAmC,IAAlCvB,EAAiC,uDAAzBxB,EAAciH,EAAW,uCAC7D,OAAOA,EAAO1G,MACZ,KAAKsC,EACH,OAAO,eACFrB,EADL,CAEEuB,OAAQkE,EAAO3G,UAGnB,KAAKwC,EACH,OAAO,eACFtB,EADL,CAEEwB,WAAYiE,EAAO3G,UAGvB,IAzB4B,iCA0B1B,OAAO,eACFkB,EADL,CAEE2B,YAAa8D,EAAO3G,UAGxB,IA9BoB,yBA+BlB,OAAO,eACFkB,EADL,CAEEqC,WAAYoD,EAAO3G,UAGvB,QACE,OAAOkB,IW7BXsE,MNE0B,WAAmC,IAAlCtE,EAAiC,uDAAzBxB,EAAciH,EAAW,uCAC5D,OAAOA,EAAO1G,MACZ,KAAKsF,EACH,OAAO,eACFrE,EADL,CAEEsE,MAAOmB,EAAO3G,UAGlB,IApBgB,0BAqBd,OAAO,eACFkB,EADL,CAEEwB,WAAYiE,EAAO3G,UAGvB,IAzB4B,gCA0B1B,OAAO,eACFkB,EADL,CAEE2B,YAAa8D,EAAO3G,UAGxB,IA9BoB,wBA+BlB,OAAO,eACFkB,EADL,CAEEqC,WAAYoD,EAAO3G,UAGvB,QACE,OAAOkB,MM1BT0F,EAAQC,YAAYJ,EAAUK,YAAgBC,MAElDV,OAAOO,MAAQA,EACAA,QCVfI,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,SAINM,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLD,QAAQC,MAAMA,EAAMuC,c","file":"static/js/main.4f0cf124.chunk.js","sourcesContent":["export default {\r\n  LOGIN: \"demouser\",\r\n  PASSWORD: \"demouser\"\r\n}","import defaultAuthData from './../../config/constant';\r\n\r\nconst SET_USER_EMAIL = 'auth/SET_USER_EMAIL';\r\nconst SET_USER_PASSWORD = 'auth/SET_USER_PASSWORD';\r\nconst UPDATE_AUTHORZATION = 'auth/UPDATE_AUTHORZATION';\r\n\r\nlet initialState = {\r\n  email: '',\r\n  password: '',\r\n  isAuthorized: false,\r\n  isValid: true\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case SET_USER_EMAIL: {\r\n      return {\r\n        ...state,\r\n        email: action.payload\r\n      }\r\n    }\r\n    case SET_USER_PASSWORD: {\r\n      return {\r\n        ...state,\r\n        password: action.payload\r\n      }\r\n    }\r\n    case UPDATE_AUTHORZATION: {\r\n      debugger\r\n      return {\r\n        ...state,\r\n        isAuthorized: action.payload,\r\n        isValid: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const onUserEmailChange = payload => ({type: SET_USER_EMAIL, payload})\r\nexport const onUserPasswordChange = payload => ({type: SET_USER_PASSWORD, payload})\r\nexport const updateAuthorization = payload => ({type: UPDATE_AUTHORZATION, payload})\r\n\r\nexport const onUserDataCheck = (email, password) => dispatch => {\r\n  const authDataMatchChecking = (defaultAuthData) => {\r\n    if(defaultAuthData.LOGIN === email && defaultAuthData.PASSWORD === password) {\r\n      dispatch(updateAuthorization(true))\r\n    } else {\r\n      dispatch(updateAuthorization(false))\r\n    }\r\n  } \r\n  authDataMatchChecking(defaultAuthData)\r\n}\r\n","import React from 'react';\r\n\r\nconst LoginForm = (props) => {\r\n  const {props:{email, password, isValid, onUserEmailChange, onUserPasswordChange}, onHandleSubmit} = props;\r\n  debugger\r\n  return <div className={\"row justify-content-md-center\"}>\r\n    <div className={\"col col-12 col-md-6\"}>\r\n      <form className={\"m-5\"} onSubmit={onHandleSubmit}>\r\n        <div className={\"form-group\"}>\r\n            <label className={\"mt-3\"} for=\"login\">\r\n              Логин\r\n            </label>\r\n            <input className={\"form-control\" + (isValid ? \"\" : \" is-invalid\")} defaultValue={email} id=\"login\" name=\"email\" type=\"text\" onChange={e => onUserEmailChange(e.target.value)}/>\r\n            <small className={isValid ? \"form-text text-muted\" : \"invalid-feedback\"}>Логин: <b>demouser</b></small>\r\n            <label className={\"mt-3\"} for=\"password\">\r\n              Пароль\r\n            </label>\r\n            <input className={\"form-control\" + (isValid ? \"\" : \" is-invalid\")} defaultValue={password} id=\"password\" name=\"user\" type=\"text\" onChange={e => onUserPasswordChange(e.target.value)}/>\r\n            <small className={isValid ? \"form-text text-muted\" : \"invalid-feedback\"}>Пароль: <b>demouser</b></small>\r\n            <input className={\"form-control btn btn-primary mt-5 block-d\"} type=\"submit\" value=\"Войти\" id=\"submit\"/>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n};\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {onUserPasswordChange, onUserEmailChange, onUserDataCheck} from '../../../redux/reducers/auth-reducer';\r\nimport LoginForm from './login-form';\r\n\r\nconst LoginPage = (props) => {\r\n  const {isAuthorized, onUserDataCheck, email, password, ...restProps} = props\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onUserDataCheck(email, password)\r\n  }\r\n  return (\r\n    isAuthorized \r\n      ? <Redirect from=\"/login\" to=\"/\"/>\r\n      : <div className={\"container\"}>\r\n          <LoginForm onHandleSubmit={handleSubmit} props={restProps}/>\r\n        </div>\r\n  )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return (\r\n    {\r\n      email: state.auth.email,\r\n      password: state.auth.password,\r\n      isAuthorized: state.auth.isAuthorized,\r\n      isValid: state.auth.isValid\r\n    }\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n  onUserEmailChange,\r\n  onUserPasswordChange,\r\n  onUserDataCheck,\r\n\r\n})(LoginPage);","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuthorized:state.auth.isAuthorized\r\n});\r\n\r\nexport const withAuthRedirection = (Component) => {\r\n  const AuthRedirectComponent = (props) => {\r\n      return !props.isAuthorized\r\n        ? <Redirect to='/login'/>\r\n        : <Component {...props}/>\r\n  }\r\n  let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n  return connectedAuthRedirectComponent\r\n} ","import React from 'react';\r\nimport {withAuthRedirection} from '../../hoc/withAuthRedirection';\r\nimport {compose} from 'redux';\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <h1 className={\"display-1 text-black-50 text-center mt-5\"}>MYTONA TEST</h1>\r\n  )\r\n}\r\n\r\nexport default compose(withAuthRedirection)(MainPage)","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const usersAPI = {\r\n    getPosts() {\r\n        return instance.get('posts')\r\n            .then(response => {\r\n                return response;\r\n            })\r\n    },\r\n    getPhotos() {\r\n        return instance.get('photos')\r\n            .then(response => {\r\n                return response;\r\n            })\r\n    },\r\n}","import {usersAPI} from \"../../data/api\";\r\n\r\nconst SET_PHOTOS = 'photos/SET_USER_EMAIL';\r\nconst IS_FETCHING = 'photos/SET_USER_PASSWORD';\r\nconst ON_CURRENT_PAGE_CHANGED = 'photos/ON_CURRENT_PAGE_CHANGED';\r\nconst SET_PAGES_COUNT = 'photos/SET_PAGES_COUNT';\r\n\r\nlet initialState = {\r\n  photos: [],\r\n  isFetching: '',\r\n  pagesSize: 100,\r\n  pageCount: '',\r\n  currentPage: 1\r\n}\r\n\r\nexport const photosReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case SET_PHOTOS: {\r\n      return {\r\n        ...state,\r\n        photos: action.payload\r\n      }\r\n    }\r\n    case IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.payload\r\n      }\r\n    }\r\n    case ON_CURRENT_PAGE_CHANGED: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.payload\r\n      }\r\n    }\r\n    case SET_PAGES_COUNT: {\r\n      return {\r\n        ...state,\r\n        pagesCount: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const updateFetchingStatus = payload => ({type: IS_FETCHING, payload}) \r\nexport const setPhotos = payload => ({type: SET_PHOTOS, payload})\r\nexport const setPagesCount = payload => ({type: SET_PAGES_COUNT, payload})\r\nexport const onCurrentPageChanged = payload => ({type: ON_CURRENT_PAGE_CHANGED, payload})\r\n\r\nexport const loadingPhotos = () => async (dispatch) => {\r\n  dispatch(updateFetchingStatus(true))\r\n  let response = await usersAPI.getPhotos()\r\n  dispatch(setPagesCount)\r\n  if(response.status === 200) {\r\n    dispatch(updateFetchingStatus(false))\r\n    dispatch(setPhotos(response.data))\r\n  } else {\r\n    console.error('status: ' + response.status)\r\n  }\r\n}","import React, {useState, useEffect}  from 'react';\r\n\r\nlet Paginator = (props) => {\r\n  const {currentPage, onPageChanged, pagesSize, totalItemsCount} = props\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let portionSize = 5;\r\n\r\n  let pages = [];\r\n  let pagesCount = Math.ceil(totalItemsCount.length / pagesSize);\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n      pages.push(i);\r\n  }\r\n\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  useEffect(() => {\r\n    \r\n  }, [totalItemsCount]);\r\n\r\n  return <>\r\n    <ul class=\"pagination\">\r\n      {portionNumber > 1\r\n        && <li className={\"page-item\"} onClick={() => {setPortionNumber(portionNumber - 1)}}><a className={\"page-link\"}>&laquo;</a></li>\r\n      }\r\n      {pages\r\n          .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n          .map(e => {\r\n              return <li className={\"page-item\"} onClick={() => {onPageChanged(e)}}><a className={\"page-link\"}>{e}</a></li>})\r\n      }\r\n      {portionCount > portionNumber\r\n        &&  <li className={\"page-item\"} onClick={() => {setPortionNumber(portionNumber + 1)}}><a className={\"page-link\"}>&raquo;</a></li>\r\n      } \r\n\r\n    </ul>\r\n    </>\r\n}\r\n\r\nexport default Paginator","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n  return <div class=\"spinner-border\" role=\"status\">\r\n    <span class=\"sr-only\">Loading...</span>\r\n  </div>\r\n}\r\n\r\nexport default Preloader","import React from 'react';\r\n\r\nconst PhotosList = ({photosList}) => {\r\n  return photosList.map(e => {\r\n    return <img className={\"img-thumbnail\"} style={{width:'10%'}} src={e.thumbnailUrl}/>\r\n  })\r\n}\r\n\r\nexport default PhotosList","import React, {useEffect} from 'react';\r\nimport {loadingPhotos, updateFetchingStatus, onCurrentPageChanged} from './../../../redux/reducers/photos-reducer';\r\nimport {connect} from 'react-redux';\r\nimport Paginator from './../../utilities/paginator/paginator';\r\nimport Preloader from './../../utilities/preloader/preloader';\r\nimport PhotosList from './photos-list';\r\nimport {withAuthRedirection} from '../../hoc/withAuthRedirection';\r\nimport {compose} from 'redux';\r\n\r\nconst PhotosPage = (props) => {\r\n  const {photos, currentPage, pagesSize} = props;\r\n  const currentPhotos = photos.slice((currentPage-1) * pagesSize, ((currentPage-1) * pagesSize) + pagesSize )\r\n  \r\n  useEffect(() => {\r\n    props.loadingPhotos()\r\n  }, [])\r\n\r\n  return <>\r\n    <h2>Photos</h2>\r\n    {props.isFetching && <Preloader />}\r\n    <Paginator \r\n      currentPage={props.currentPage}\r\n      onPageChanged={props.onCurrentPageChanged}\r\n      pagesSize={props.pagesSize}\r\n      totalItemsCount={props.photos}\r\n    />\r\n    <PhotosList photosList={currentPhotos}/>\r\n  </>\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n  isFetching: state.photos.isFetching,\r\n  photos: state.photos.photos,\r\n  pagesSize: state.photos.pagesSize,\r\n  currentPage: state.photos.currentPage\r\n})\r\n\r\nexport default compose(connect(\r\n  mapStateToProps, {\r\n    loadingPhotos,\r\n    updateFetchingStatus,\r\n    onCurrentPageChanged\r\n  }),withAuthRedirection)(PhotosPage);","import {usersAPI} from \"../../data/api\";\r\n\r\nconst SET_POSTS = 'posts/SET_USER_EMAIL';\r\nconst IS_FETCHING = 'posts/SET_USER_PASSWORD';\r\nconst ON_CURRENT_PAGE_CHANGED = 'posts/ON_CURRENT_PAGE_CHANGED';\r\nconst SET_PAGES_COUNT = 'posts/SET_PAGES_COUNT';\r\n\r\nlet initialState = {\r\n  posts: [],\r\n  isFetching: '',\r\n  pagesSize: 10,\r\n  pageCount: '',\r\n  currentPage: 1\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case SET_POSTS: {\r\n      return {\r\n        ...state,\r\n        posts: action.payload\r\n      }\r\n    }\r\n    case IS_FETCHING: {\r\n      return {\r\n        ...state,\r\n        isFetching: action.payload\r\n      }\r\n    }\r\n    case ON_CURRENT_PAGE_CHANGED: {\r\n      return {\r\n        ...state,\r\n        currentPage: action.payload\r\n      }\r\n    }\r\n    case SET_PAGES_COUNT: {\r\n      return {\r\n        ...state,\r\n        pagesCount: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const updateFetchingStatus = payload => ({type: IS_FETCHING, payload}) \r\nexport const setPosts = payload => ({type: SET_POSTS, payload})\r\nexport const setPagesCount = payload => ({type: SET_PAGES_COUNT, payload})\r\nexport const onCurrentPageChanged = payload => ({type: ON_CURRENT_PAGE_CHANGED, payload})\r\n\r\nexport const loadingPosts = () => async (dispatch) => {\r\n  dispatch(updateFetchingStatus(true))\r\n  let response = await usersAPI.getPosts()\r\n  debugger\r\n  dispatch(setPagesCount)\r\n  if(response.status === 200) {\r\n    dispatch(updateFetchingStatus(false))\r\n    dispatch(setPosts(response.data))\r\n  } else {\r\n    console.error('status: ' + response.status)\r\n  }\r\n}","import React from 'react';\r\n\r\nconst PostsTable = ({postsList}) => {\r\n  return <table class=\"table\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">#</th>\r\n      <th scope=\"col\">Заголовок</th>\r\n      <th scope=\"col\">Пост</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {postsList.map(e => {\r\n      return <tr>\r\n        <th scope=\"row\">{e.id}</th>\r\n        <td>{e.title}</td>\r\n        <td>{e.body}</td>\r\n      </tr>\r\n    })}\r\n  </tbody>\r\n</table>\r\n}\r\n\r\nexport default PostsTable;","import React, {useEffect} from 'react';\r\nimport {loadingPosts, updateFetchingStatus, onCurrentPageChanged} from '../../../redux/reducers/posts-reducer';\r\nimport {connect} from 'react-redux';\r\nimport Paginator from '../../utilities/paginator/paginator';\r\nimport Preloader from '../../utilities/preloader/preloader';\r\nimport PostsTable from './posts-table';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirection} from './../../hoc/withAuthRedirection'\r\n\r\nconst PostsPage = (props) => {\r\n  const {posts, currentPage, pagesSize} = props;\r\n  const currentPosts = posts.slice((currentPage-1) * pagesSize, ((currentPage-1) * pagesSize) + pagesSize )\r\n  \r\n  useEffect(() => {\r\n    props.loadingPosts()\r\n  }, [])\r\n\r\n  return <>\r\n    <h2>Posts</h2>\r\n    {props.isFetching && <Preloader />}\r\n    <Paginator \r\n      currentPage={props.currentPage}\r\n      onPageChanged={props.onCurrentPageChanged}\r\n      pagesSize={props.pagesSize}\r\n      totalItemsCount={props.posts}\r\n    />\r\n    <PostsTable postsList={currentPosts}/>\r\n  </>\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n  isFetching: state.posts.isFetching,\r\n  posts: state.posts.posts,\r\n  pagesSize: state.posts.pagesSize,\r\n  currentPage: state.posts.currentPage\r\n})\r\n\r\nexport default \r\n\r\n  compose(connect(\r\n    mapStateToProps, {\r\n      loadingPosts,\r\n      updateFetchingStatus,\r\n      onCurrentPageChanged\r\n    }), withAuthRedirection)(PostsPage);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {updateAuthorization} from '../../../redux/reducers/auth-reducer'\r\n\r\nconst NavigationBar = ({isAuthorized, updateAuthorization}) => {\r\n  return (\r\n    <div>\r\n      <h4 className={\"text-info\"}>Efim Nushtaev</h4>\r\n      <ul className={\"nav justify-content-end\"}>\r\n        <li className={\"nav-item\"}>\r\n          <NavLink activeClassName={\"active\"} className={\"nav-link\"} to=\"/\">Main</NavLink>\r\n        </li>\r\n        <li className={\"nav-item\"}>\r\n          <NavLink activeClassName={\"active\"} className={\"nav-link\"} to=\"/posts\">Posts</NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink activeClassName={\"active\"} className={\"nav-link\"} to=\"/photos\">Photos</NavLink>\r\n        </li>\r\n        <li>\r\n          {isAuthorized\r\n            ? <button className={\"btn btn-link nav-link border-left text-dark\"} onClick={() => updateAuthorization(false)}>Logout</button>\r\n            : <NavLink activeClassName={\"active\"} className={\"nav-link border-left\"} to=\"/login\">Login</NavLink>\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  isAuthorized: state.auth.isAuthorized\r\n})\r\n\r\nexport default connect(mapStateToProps, {updateAuthorization})(NavigationBar)","import React from 'react'\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport LoginPage from './view/components/login-page/login-page';\nimport MainPage from './view/components/main-page/main-page';\nimport PhotosPage from './view/components/photos-page/photos-page';\nimport PostsPage from './view/components/posts-page/posts-page';\nimport NavigationBar from './view/components/navigation-bar/navigation-bar';\nimport { connect } from 'react-redux';\n\nconst App = () => {\n  \n  return (\n    <div className=\"container-fluid mt-3\">\n      <div>\n        <NavigationBar/>\n      </div>\n      <div>\n      <Switch>\n        <Route path=\"/login\" render={() => <LoginPage/>} />\n        <Route path=\"/posts\" render={() => <PostsPage/>} />\n        <Route path=\"/photos\" render={() => <PhotosPage/>} />\n        <Route exact path=\"/\" render={() => <MainPage/>} />\n        <Route path=\"*\" render={() => <h1>404</h1>} />\n      </Switch>\n\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => ({\n  isAuthorized: state.auth.isAuthorized\n})\nexport default connect(mapStateToProps, {})(App);","/* eslint-disable no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware\r\n} from 'redux';\r\nimport {authReducer} from './reducers/auth-reducer';\r\nimport {photosReducer} from './reducers/photos-reducer';\r\nimport {postsReducer} from './reducers/posts-reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nlet reducers = combineReducers({\r\n  auth: authReducer,\r\n  photos: photosReducer,\r\n  posts: postsReducer\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nwindow.store = store;\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store-redux';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}